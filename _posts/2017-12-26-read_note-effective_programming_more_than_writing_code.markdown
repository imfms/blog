---
layout: post
title:  "《高效能程序员的修炼》阅读手记"
subtitle: "软件开发远不只是写代码那么简单？"
date:   2017-12-56 19:56:30 +0800
categories: program
tags: 
- read_note
---

# 《高效能程序员的修炼》阅读手记

书籍本身为Jeff Atwood博客的一些文章摘选，内容有技术相关但大部分是与技术无关，很多是作者日常工作的感悟。在阅读时候觉得内容有些零散，本着认真汲取前人经验教训的思想,在通读本书之后，回头认真作此记录。

## 书籍信息

- 作者: Jeff Atwood
- 出版社: 人民邮电出版社
- 版本: 2013年7月第1版

## 章/节小计

- 入门须知
  - 你想成为一个程序员
    软件开发的整个历程，就是程序员耗尽毕生精力去编写代码，以使其他人能从代码编写工作中解脱出来。程序员的终极目标是让自己失业 :)

    当撰写出的程序交给用户手中，用户激动万分试用新功能的样子、将大量人工机械化工作替代的情形会让程序员统统加满自豪/成就/存在感。让我们，为这世界添砖加瓦。
  - 程序员的八种境界
    我想要你告诉我，不，是告诉全班同学，你究竟想过怎样的生活？！

    总是信誓旦旦的向周围人道着自己长大后要成为程序员的理想、假装在写程序却在玩游戏、连程序能做什么都说不明白的小男孩。如今成了书中定义的倒数第一级别——烂程序员，你还想要什么！
    “书中定义的倒数第二级别程序员”
  - 如何培养写作习惯
    - “通过清晰的注释和技术文档，让其他程序员能够读懂他们的代码，这也意味着其他程序员能够重用他们的代码而不必重新去写“。所写下的每一行代码都要发挥他的最大价值


    - “书面沟通有助于理清我们的思路。当你要向其他人详细解释某样东西的时候，你会惊讶地发现自己的无知。于是，你不得不开始一个全新的探索过程”
      前阵子一还在学习编程的朋友问我：“别人都说程序员要多写博客，是为什么？”，后期补充： “人容易偷懒，学东西总会觉得知道了就行且误以为自己真的知道了，写博客会让自己强行思考，总结与归纳。在知识不参透的情况下人是不会轻易表达出来的，你会害怕暴露自己的无知。”

- 把一堆烂事搞定的艺术 
  - 学海无边
    - “如果你想造一艘船，就不要催着工人们去收集木材，分派工作，发号施令，你应该教会他们的是对无边无际大海的渴望” —— Antoine de Saint-Exupery
      因为我知道，你和我们一样，渴望和无边无际的大海。
    - 多少程序员在做不会给他们带来任何经济收益的作业时会比做他们的本职工作更满足。
    - 我们热爱编程
  - 磨刀不误砍柴工
    - TODO
  - 一路向前冲
    - 快速迭代向更好，记得要快
  - 关于多任务的神话
    夏天的时候人们很容易因为飞来飞去又无法除去的苍蝇变的暴躁，一天过后回想一整天都做了些什么，除了纷扰的苍蝇与自己的暴躁好像确实就没什么了

- 高效编程之原则

  - 第一条法则：永远都是你的错
    - 公司有天有位客户前来造访抱怨施工业务的种种不良的地方，一个责任人则向客户一个一个的解释不良的原因是什么，有一些类似的对话：“墙面有的地方粉刷不均匀” “墙面不均匀是因为粉刷工没做好” “我房间有个开关居然都不通电” “那是因为水电班组的问题” “柜子还没装” “杂工那天请假了” 客户有些不耐烦了：“那粉刷工、杂工、水电班组不都是你们公司请的？” ……
      同样的情况在软件开发上这些解释却听起来会合理很多：这个问题是因为那个第三方的问题，这一定是操作系统的原因，这估计是编译器的原因……
      但是这些绝对不应该是我们遇到问题的第一反应，要总是假定问题处在你的代码里并且根据这个假设采取行动：“嘿，这是我的错——让我把它弄个水落石出”
    - 同时也想起前段时间阅读的《阿里巴巴java开发手册》中对关于NPE的问题的规约“本手册明确防止NPE是调用者的责任”也表达了同样的思想
  - 大道至简
    - 我们在编写代码时所作的每一个决定都是一个折中，我们想要的需要是一个实用而明智的策略，以缩减一个程序员在想要了解程序的工作原理时所需阅读的代码里。
    - 从代码的简洁度开始然后再依据测试的结果按需去提升其它维度
      - 代码简洁度
      - 功能的完整性
      - 执行速度
      - 编码所花费的时间
      - 健壮性
      - 灵活性
  - 避免写注释
    - 代码编写中要将对代码中可命名的元素作最大的利用，给一个类、函数、变量起一个显而易见的名字。我们最终的追求应该是代码最大可能的自解释，而不是代码间堆满注释，注释的存在意义是讲解程序为什么这样做
    - “为了让你的程序员同伴们更容易阅读和理解你的代码，你需要不断地改进你的代码，但如果你已经重写、重构甚至重新设计了很多遍——当你始终一筹莫展已经想不出任何办法让你的代码变得更浅显易懂，这时候，才应该在百般无奈之下加些注释来解释它们”
    - “注释是旁白，它们有自身的价值，但却不能用来代替清洁、人物和场景”
    - 我深信当我要撰写一个api时，用户所关心的是该api将会造成的结果，所有对用户调用该api以达到结果过程中的任何阻塞，都不应该存在。当用户想使用调用结果时，用户为什么要查阅我的注释以了解可能特殊的情况、前提条件、所需的执行顺序？我恨不得在撰写从集合中查找某个元素时没查找到的情况下都想要抛出一个checked exception，这样用户即可根据这个函数的命名、入参、返回值及必须要声明可能要处理的异常即可知晓该函数的所有功能及可能发生的任何情况而无需进一步翻阅关于该函数的任何内容。（当然在编码过程中由于checked exception对代码可读及简洁的太大侵入性，对一些简单的功能一般还是用特殊值来代替结果:)
  - 学会读源代码
    - “很多时候你可以让其他人其他人在上游把问题修复；但是更多时候，你得自己动手解决”
    - “不管文档上怎么说，源代码才是最终的事实，是你所能找到的最好的、最确定的、最新的‘文档’"，且该事实永远不会改变。
      (相信大多开发人员会觉得文档的撰写与维护是一件麻烦事，谁又没遇到过阅读源代码的时候发现的注释与实际作用毫无相关性)
    - “如果一个软件在我的机器上运行，那它就是我的软件。我要对它负责，我必须把它弄明白，从源代码开始构建是一条必须遵循的原则。我必须控制我的环境，我还要控制所有我依赖的东西”
    - “在大多数情况下，菜鸟程序员认为漂亮的，往往止于肤浅；而他们认为丑陋的，往往是骇客大师们所写的经久考验的产品级代码”，何不多多学习
  - 向橡皮鸭求助
    提出问题的良好组织过程实际上促使我们自己诊断问题
    1. 我碰到一个问题
    2. 我决定把这个问题提到 Stack Overflow
    3. 我很笨拙的写下我的问题
    4. 我意识到这个问题根本说不通
    5. 我花了十五分钟重新思考该如何提出我的问题
    6. 我意识到我正在一个完全错误的方向上解决这个问题
    7. 我从头再来，然后很快就找到了解决方案
  - 创新以人为本/执行更重要
    - TODO
  - 你的团队能通过电梯测试吗
    - TODO
  - 性能致胜
    - “在一段长时间的开发过程中，你很容易就会忽略这里那里的几百毫秒延时，当你有一天回过头去看的时候，你会发现一次执行“反常”的花掉了太多时间。所以，一定要把软件性能的实时执行时间展示在可以很简单看到的地方，这个简单的做法迫使开发者去修正所有性能方面的退化与疏忽，随之，性能也变成了一种骄傲”
    - “要么很快，要么已经死去”

- 招聘程序员须得其法

- 促使团队紧密协作

- 蝙蝠洞：程序员的高效工作场所

- 设计时要把用户放在心上

- 安全基础：保护用户数据

- 加强代码测试，别让它太差劲

- 创建并管理社区，同时从中受益

- 揭露营销技俩，以及如何规避

- 轻重缓急，了然于心

## 重申概念关键字

- 抽象
- 通读
- 创作公用
  Creative Commons

